
Linux开机启动十步骤



摘要: 　　开机过程指的是从打开计算机电源直到LINUX显示用户登录画面的全过程。分析LINUX开机过程也是深入了解LINUX核心
工作原理的一个很好的途径。　　启动第一步--加载BIOS　　当你打开计算机电源，计算机会首先加载BIO ...

　　开机过程指的是从打开计算机电源直到LINUX显示用户登录画面的全过程。分析LINUX开机过程也是深入了解LINUX核心工作
原理的一个很好的途径。                                                                                         
                                                                                                               
　　启动第一步--加载BIOS                                                                                       
                                                                                                               
　　当你打开计算机电源，计算机会首先加载BIOS信息，BIOS信息是如此的重要，以至于计算机必须在最开始就找到它。这是 
因为BIOS中包含了CPU的相关信息、设备启动顺序信息、硬盘信息、内存信息、时钟信息、PnP特性等等。在此之后，计算机心 
里就有谱了，知道应该去读取哪个硬件设备了。在BIOS将系统的控制权交给硬盘第一个扇区之后，就开始由Linux来控制系统了
。                                                                                                             
                                                                                                               
　　启动第二步--读取MBR                                                                                        
                                                                                                               
　　硬盘上第0磁道第一个扇区被称为MBR，也就是Master Boot Record，即主引导记录，它的大小是512字节，可里面却存放了
预启动信息、分区表信息。可分为两部分：第一部分为引导(PRE-BOOT)区，占了446个字节;第二部分为分区表(PARTITION     
PABLE)，共有66个字节，记录硬盘的分区信息。预引导区的作用之一是找到标记为活动(ACTIVE)的分区，并将活动分区的引导 
区读入内存。                                                                                                   
                                                                                                               
　　系统找到BIOS所指定的硬盘的MBR后，就会将其复制到0×7c00地址所在的物理内存中。其实被复制到物理内存的内容就是 
Boot Loader，而具体到你的电脑，那就是lilo或者grub了。                                                          
                                                                                                               
　　启动第三步--Boot Loader                                                                                    
                                                                                                               
　　Boot Loader 就是在操作系统内核运行之前运行的一段小程序。通过这段小程序，我们可以初始化硬件设备、建立内存空 
间的映射图，从而将系统的软硬件环境带到一个合适的状态，以便为最终调用操作系统内核做好一切准备。通常，BootL oade:
是严重地依赖于硬件而实现的，不同体系结构的系统存在着不同的Boot Loader。                                        
                                                                                                               
　　Linux的引导扇区内容是采用汇编语言编写的程序，其源代码在arch/i386/boot中(不同体系的CPU有其各自的boot目录)， 
有4个程序文件：                                                                                                
                                                                                                               
　　◎bootsect.S，引导扇区的主程序，汇编后的代码不超过512字节，即一个扇区的大小                                
                                                                                                               
　　◎setup.S，引导辅助程序                                                                                    
                                                                                                               
　　◎edd.S,辅助程序的一部分，用于支持BIOS增强磁盘设备服务                                                     
                                                                                                               
　　◎video.S,辅助程序的另一部分，用于引导时的屏幕显示                                                         
                                                                                                               
　　Boot Loader有若干种，其中Grub、Lilo和spfdisk是常见的Loader，这里以Grub为例来讲解吧。                       
                                                                                                               
　　系统读取内存中的grub配置信息(一般为menu.lst或grub.lst)，并依照此配置信息来启动不同的操作系统。             
                                                                                                               
　　启动第四步--加载内核                                                                                       
                                                                                                               
　　根据grub设定的内核映像所在路径，系统读取内存映像，并进行解压缩操作。此时，屏幕一般会输出“Uncompressing    
Linux”的提示。当解压缩内核完成后，屏幕输出“OK, booting the kernel”。                                        
                                                                                                               
　　系统将解压后的内核放置在内存之中，并调用start_kernel()函数来启动一系列的初始化函数并初始化各种设备，完成   
Linux核心环境的建立。至此，Linux内核已经建立起来了，基于Linux的程序应该可以正常运行了。                        
                                                                                                               
　　start_kenrel()定义在init/main.c中，它就类似于一般可执行程序中的main()函数，系统在此之前所做的仅仅是一些能让
内核程序最低限度执行的初始化操作，真正的内核初始化过程是从这里才开始。函数start_kerenl()将会调用一系列的初始化 
函数，用来完成内核本身的各方面设置，目的是最终建立起基本完整的Linux核心环境。                                  
                                                                                                               
　　start_kernel()中主要执行了以下操作：                                                                       
                                                                                                               
　　(1) 在屏幕上打印出当前的内核版本信息。                                                                     
                                                                                                               
　　(2) 执行setup_arch()，对系统结构进行设置。                                                                 
                                                                                                               
　　(3)执行sched_init()，对系统的调度机制进行初始化。先是对每个可用CPU上的runqueque进行初始化;然后初始化0号进程
(其task struct和系统空M堆栈在startup_32()中己经被分配)为系统idle进程，即系统空闲时占据CPU的进程。              
                                                                                                               
　　(4)执行parse_early_param()和parsees_args()解析系统启动参数。                                               
                                                                                                               
　　(5)执行trap_in itQ，先设置了系统中断向量表。0-19号的陷阱门用于CPU异常处理;然后初始化系统调用向量;最后调用  
cpu_init()完善对CPU的初始化，用于支持进程调度机制，包括设定标志位寄存器、任务寄存器、初始化程序调试相关寄存器等
等。                                                                                                           
                                                                                                               
　　(6)执行rcu_init()，初始化系统中的Read-Copy Update互斥机制。                                                
                                                                                                               
　　(7)执行init_IRQ()函数，初始化用于外设的中断，完成对IDT的最终初始化过程。                                   
                                                                                                               
　　(8)执行init_timers()，softirq_init()和time_init()函数，分别初始系统的定时器机制，软中断机制以及系统日期和时
间。                                                                                                           
                                                                                                               
　　(9)执行mem_init()函数，初始化物理内存页面的page数据结构描述符，完成对物理内存管理机制的创建。              
                                                                                                               
　　(10)执行kmem_cache_init()，完成对通用slab缓冲区管理机制的初始化工作。                                      
                                                                                                               
　　(11)执行fork_init()，计算出当前系统的物理内存容量能够允许创建的进程(线程)数量。                            
                                                                                                               
　　(12)执行proc_caches_init() , bufer_init()，unnamed_dev_init() ,vfs_caches_init()，signals_init()等函数对各 
种管理机制建立起专用的slab缓冲区队列。                                                                         
                                                                                                               
　　(13 )执行proc_root_init()Wl数，对虚拟文件系统/proc进行初始化。                                             
                                                                                                               
　　在 start_kenrel()的结尾，内核通过kenrel_thread()创建出第一个系统内核线程(即1号进程)，该线程执行的是内核中的
init()函数，负责的是下一阶段的启动任务。最后调用cpues_idle()函数：进入了系统主循环体口默认将一直执行           
default_idle()函数中的指令，即CPU的halt指令，直到就绪队列中存在其他进程需要被调度时才会转向执行其他函数。此时，
系统中唯一存在就绪状态的进程就是由kerne_hread()创建的init进程(内核线程)，所以内核并不进入default_idle()函数，而
是转向init()函数继续启动过程。                                                                                 
                                                                                                               
　　启动第五步--用户层init依据inittab文件来设定运行等级                                                        
                                                                                                               
　　内核被加载后，第一个运行的程序便是/sbin/init，该文件会读取/etc/inittab文件，并依据此文件来进行初始化工作。 
                                                                                                               
　　其实/etc/inittab文件最主要的作用就是设定Linux的运行等级，其设定形式是“：id:5:initdefault:”，这就表明Linux
需要运行在等级5上。Linux的运行等级设定如下：                                                                   
                                                                                                               
　　0：关机                                                                                                    
                                                                                                               
　　1：单用户模式                                                                                              
                                                                                                               
　　2：无网络支持的多用户模式                                                                                  
                                                                                                               
　　3：有网络支持的多用户模式                                                                                  
                                                                                                               
　　4：保留，未使用                                                                                            
                                                                                                               
　　5：有网络支持有X-Window支持的多用户模式                                                                    
                                                                                                               
　　6：重新引导系统，即重启                                                                                    
                                                                                                               
　　启动第六步--init进程执行rc.sysinit                                                                         
                                                                                                               
　　在设定了运行等级后，Linux系统执行的第一个用户层文件就是/etc/rc.d/rc.sysinit脚本程序，它做的工作非常多，包括
设定PATH、设定网络配置(/etc/sysconfig/network)、启动swap分区、设定/proc等等。如果你有兴趣，可以到/etc/rc.d中查 
看一下rc.sysinit文件。                                                                                         
                                                                                                               
　　线程init的最终完成状态是能够使得一般的用户程序可以正常地被执行，从而真正完成可供应用程序运行的系统环境。它 
主要进行的操作有：                                                                                             
                                                                                                               
　　(1) 执行函数do_basic_setup()，它会对外部设备进行全面地初始化。                                             
                                                                                                               
　　(2) 构建系统的虚拟文件系统目录树，挂接系统中作为根目录的设备(其具体的文件系统已经在上一步骤中注册)。       
                                                                                                               
　　(3) 打开设备/dev/console，并通过函数sys_dup()打开的连接复制两次，使得文件号0,1 ,2 全部指向控制台。这三个文 
件连接就是通常所说的“标准输入”stdin,“标准输出”stdout和“标准出错信息”stderr这三个标准I/O通道。            
                                                                                                               
　　(4) 准备好以上一切之后，系统开始进入用户层的初始化阶段。内核通过系统调用execve()加载执T子相应的用户层初始化
程序，依次尝试加载程序"/sbin/initl"," /etc/init"," /bin/init'，和“/bin/sh。只要其中有一个程序加载获得成功，那 
么系统就将开始用户层的初始化，而不会再回到init()函数段中。至此，init()函数结束，Linux内核的引导部分也到此结束。
                                                                                                               
　　启动第七步--启动内核模块                                                                                   
                                                                                                               
　　具体是依据/etc/modules.conf文件或/etc/modules.d目录下的文件来装载内核模块。                                
                                                                                                               
　　启动第八步--执行不同运行级别的脚本程序                                                                     
                                                                                                               
　　根据运行级别的不同，系统会运行rc0.d到rc6.d中的相应的脚本程序，来完成相应的初始化工作和启动相应的服务。     
                                                                                                               
　　启动第九步--执行/etc/rc.d/rc.local                                                                         
                                                                                                               
　　你如果打开了此文件，里面有一句话，读过之后，你就会对此命令的作用一目了然：                                 
                                                                                                               
　　# This script will be executed *after* all the other init scripts.                                         
                                                                                                               
　　# You can put your own initialization stuff in here if you don’t                                          
                                                                                                               
　　# want to do the full Sys V style init stuff.                                                              
                                                                                                               
　　rc.local就是在一切初始化工作后，Linux留给用户进行个性化的地方。你可以把你想设置和启动的东西放到这里。      
                                                                                                               
　　启动第十步--执行/bin/login程序，进入登录状态                                                               
                                                                                                               
　　此时，系统已经进入到了等待用户输入username和password的时候了，你已经可以用自己的帐号登入系统了。           
                                                                                                               
　　1: 启动电源后，主机第一步先做的就是查询BIOS(全称：basic input/output system 基本输入输出系统)信息。了解整个
系统的硬件状态，如CPU，内存，显卡，网卡等。嗯，这一步windows算和它是一家。不分彼此。                           
                                                                                                               
　　2: 接下来，就是主机读取MBR(硬盘的第一个扇区)里的boot loader了。这个可是重点哦，据说troubleshooting里就会考 
这点，给个坏了的loader，叫你修正。windows不支持linux的分区格式。所以，用windows的boot。ini是查不到linux的系统的
。一般我装系统都是先装 windows再装linux，然后用grub来做boot loader。两个字：省心!因为linux不像windows那么小气。
grub可是支持windows分区格式的哦。                                                                              
                                                                                                               
　　3: 接上一步，主机读取boot loader后，会读取里面的信息，知道谁跟谁是待在哪，假如主机想进入linux系统，读取到  
linux核心是在/boot文件目录中后，将此核心加载到内存中。开始了接下来的分析启动之旅。                             
                                                                                                               
　　4: OK，第一个运行程序是谁？就是/sbin/init程序。不信，就用top程序看下，是不是PID为1的就是这个东东，它，可是 
万物之祖啊，我简称它是女娲娘娘(不喜欢亚当夏娃)。                                                               
                                                                                                               
　　· 5: init首先查找启动等级(run-level)。因为启动等级不同，其运行脚本(也就是服务)会不同。默认的等级有以下几项
：                                                                                                             
                                                                                                               
　　0 - halt (系统直接关机)                                                                                    
                                                                                                               
　　1 - single user mode (单人模式，用于系统维护时使用)                                                        
                                                                                                               
　　2 - Multi-user，without NFS (类似3模式，不过少了NFS服务)                                                   
                                                                                                               
　　3 - Full multi-user mode (完整模式，不过，是文本模式)                                                      
                                                                                                               
　　4 - unused (系统保留功能)                                                                                  
                                                                                                               
　　5 - X11 (与3模式类似，不过，是X终端显示)                                                                   
                                                                                                               
　　6 - reboot (重新开机)                                                                                      
                                                                                                               
　　(不要选择0或4，6 否则，进步了系统的)                                                                       
                                                                                                               
　　· 6: OK。系统知道自己的启动等级后，接下来，不是去启动服务，而是，先设置好主机运行环境。读取的文件是/etc/rc
。d/rc。sysinit文件。那究竟要设置哪些环境呢？                                                                  
                                                                                                               
　　· 设置网络环境/etc/sysconfig/network，如主机名，网关，IP，DNS等。                                         
                                                                                                               
　　· 挂载/proc。此文件是个特殊文件，大小为0，因为它是在内存当中。里面东东最好别删。                          
                                                                                                               
　　· 根据内核在开机时的结果/proc/sys/kernel/modprobe。开始进行周边设备的侦测。                               
                                                                                                               
　　· 载入用户自定义的模块/etc/sysconfig/modules/*。modules                                                   
                                                                                                               
　　· 读取/etc/sysctl。conf文件对内核进行设定。                                                               
                                                                                                               
　　· 设定时间，终端字体，硬盘LVM或RAID功能，以fsck进行磁盘检测。                                             
                                                                                                               
　　· 将开机状况记录到/var/log/dmesg中。(可以用命令dmesg查看结果)                                             
                                                                                                               
　　· 7: OK，接下来，就是启动系统服务了，不同的run-level会有不同的服务启动。到/etc/rc。d目录中，不同的level会 
有不同的目录。如启动 3模式，会有个rc3。d目录，里面就保存着服务。其中，S(start)开头的表明开机启动，K(kill)开头的
表明开机不启动。数字表示启动顺序。数字越小，启动越早。                                                         
                                                                                                               
　　注意，他们都是连接到etc/rc。d/init。d/目录中的相关文件。所以，想手工启动某一服务，可以用"/etc/rc。d/init。 
d/某个服务 start"启动哦。相反，我们也可以把某个服务ln(链接命令)到不同run-level的目录中。记得打上S或者K+数字哦。
                                                                                                               
　　· 8: 读取服务后，主机会读取/etc/rc。d/rc。local文件。所以，如果需要什么开机启动的话，可以写个脚本或命令到 
这里面来。就不用像上面那么麻烦。以后删除也方便。                                                               
                                                                                                               
　　OK，经过一番长途跋涉后，系统终于可以安心的开启shell了。                                                    
                                                                                                               
linux开机启动服务的修改与查看 (2009-08-31 17:59)                                                               
分类：linux菜鸟起航                                                                                            
                                                                                                               
每次系统开机的时候，都会根据不同的runlevel级别启动不同的服务。                                                 
                                                                                                               
开机按[CTRL]+[ALT]+[F7]/[F8]可查看系统启动时正在启动的服务！！！！                                             
                                                                                                               
　　众所周知Linux给我们提供了7中不同的启动级别0～6，那么不同的启动级别都会启动那些服务哪。可以使用chkconfig    
——list 查看，可以使用chkconfig 服务名 ——level 3 ｛on|of｝修改是否要再某个级别启动或停止。                  
                                                                                                               
　　1. 例如：要把sshd服务在第3种启动级别中停止。                                                               
                                                                                                               
[root@team4 rc3.d]# chkconfig sshd --level 3 off                                                               
中国网管联盟www.bitscn.com                                                                                     
                                                                                                               
　　2. 还可以手工修改，在/etc/rc.d/这个目录里有很多不同runlevel对应的目录，里面表明进入某个启动级别时要启动和停
止那些服务。                                                                                                   
                                                                                                               
　　例如：中国网管联盟www、bitsCN、com                                                                         
                                                                                                               
[root@team4 etc]# ls /etc/rc.d                                                                                 
init.d  rc0.d  rc2.d  rc4.d  rc6.d     rc.sysinit                                                              
rc      rc1.d  rc3.d  rc5.d  rc.local                                                                          
我们用rc3.d这个目录为例，这个目录里面记录的是进入init 3时需要停止和启动那些服务。                              
下面为rc3.d目录的内容：                                                                                        
                                                                                                               
[root@team4 etc]# ls /etc/rc.d/rc3.d/                                                                          
K02avahi-dnsconfd            K89pand             S25bluetooth                                                  
K02dhcdbd                    K89rdisc            S25netfs                                                      
K02NetworkManager            K91capi             S25pcscd                                                      
K02NetworkManagerDispatcher  K99readahead_later  S26apmd                                                       
K05conman                    S04readahead_early  S26hidd                                                       
                                                                                                               
　　K开头代表这个启动级别需要停止的服务，编号是停止的时候执行的顺序，再后面就是服务明了。                      
                                                                                                               
　　S开头则是要启动那些服务。网管网bitsCN_com                                                                  
                                                                                                               
　　注意：先执行K开头的，后执行S开头的。所以S开头的服务会覆盖K开头的服务。                                     
                                                                                                               
Linux设置程序的开机自启动与Linux服务                                                                           
                                                                                                               
这里只说我所知道的，举例如下                                                                                   
需求是我要用Windows下的VNC Viewer连接到Linux Server. 我在Linux下面输入                                         
#vncserver                                                                                                     
设置好密码，好现在我就可以在Windows下面使用VNC连接到Linux桌面了，这个时候如果我的Linux Server系统重启了，那么我
还得再敲一次vncserver这个命令，所以我现在要让Linux Server在开机时自动启动vncserver                             
有哪些方法呢？                                                                                                 
1. 我可以把vncserver设置成系统的服务，并启动起来，使用如下命令查看vncserver是否已经是系统的服务                
#chkconfig --list|grep vnc                                                                                     
vncserver 0:off 1:off 2:off 3:off 4:off 5:off 6:off                                                            
现在我们要设置vncserver开机自启动，使用如下命令                                                                
#chkconfig --level 5 vncserver on#chkconfig --list|grep vnc                                                    
vncserver 0:off 1:off 2:off 3:off 4:off 5:on 6:off                                                             
这个时候重启系统，那么vncserver就会以服务的方式自动起来，但是现在如果想立即使用vnc则直接敲命令 vncserver即可   
2. 我们可以把vncserver这条命令写在Linux开机要运行的脚本里面，那些脚本是Linux开机时要执行的呢？                 
我知道的有以下这些:                                                                                            
/etc/rc.local                                                                                                  
/etc/rc.sysinit                                                                                                
/etc/inittab                                                                                                   
/etc/profile                                                                                                   
这里记住Linux服务于Linux开机自启动之间的区别和联系                                                             
                                                                                                               
linux开机启动脚本的顺序                                                                                        
                                                                                                               
                      来源: ChinaUnix博客　日期：2008.07.16 13:37　(共有条评论) 我要评论                       
                                                                                                               
如果服务器重启之后需要手工开启许多服务、工作及以后的维护相对比较繁琐、特地总结了下linux下开机自动启动脚本所涉  
及的知识和方法、如下：                                                                                         
1、相关基础知识点                                                                                              
1）redhat的启动方式和执行次序是：                                                                              
加载内核                                                                                                       
执行init程序                                                                                                   
/etc/rc.d/rc.sysinit # 由init执行的第一个脚本                                                                  
/etc/rc.d/rc $RUNLEVEL # $RUNLEVEL为缺省的运行模式                                                             
/etc/rc.d/rc.local #相应级别服务启动之后、在执行该文件（其实也可以把需要执行的命令写到该文件中）               
/sbin/mingetty # 等待用户登录                                                                                  
                                                                                                               
在Redhat中，/etc/rc.d/rc.sysinit主要做在各个运行模式中相同的初始化工作，包括：                                 
调入keymap以及系统字体                                                                                         
启动swapping                                                                                                   
设置主机名                                                                                                     
设置NIS域名                                                                                                    
检查（fsck）并mount文件系统                                                                                    
打开quota                                                                                                      
装载声卡模块                                                                                                   
设置系统时钟                                                                                                   
等等。                                                                                                         
/etc/rc.d/rc则根据其参数指定的运行模式(运行级别，你在inittab文件中可以设置)来执行相应目录下的脚本。凡是以Kxx   
开头的                                                                                                         
，都以stop为参数来调用；凡是以Sxx开头的，都以start为参数来调用。调用的顺序按xx                                 
从小到大来执行。(其中xx是数字、表示的是启动顺序)例如，假设缺省的运行模式是3，/etc/rc.d/rc就会按上述方式调用    
/etc/rc.d/rc3.d/下的脚本。                                                                                     
值得一提的是，Redhat中的运行模式2、3、5都把/etc/rc.d/rc.local做为初始化脚本中                                  
的最后一个，所以用户可以自己在这个文件中添加一些需要在其他初始化工作之后，登录之前执行的命令。                 
                                                                                                               
init在等待/etc/rc.d/rc执行完毕之后（因为在/etc/inittab中/etc/rc.d/rc的                                         
action是wait），将在指定的各个虚拟终端上运行/sbin/mingetty，等待用户的登录。                                   
至此，LINUX的启动结束。                                                                                        
2）init运行级别及指令                                                                                          
一、什么是INIT:                                                                                                
　　init是Linux系统操作中不可缺少的程序之一。                                                                  
　　所谓的init进程，它是一个由内核启动的用户级进程。                                                           
　　内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用   
户级程序init的方式，完成引导进程。所以,init始终是第一个进程（其进程编号始终为1）。                             
　　内核会在过去曾使用过init的几个地方查找它，它的正确位置（对Linux系统来说）是/sbin/init。如果内核找不到init  
，它就会试着运行/bin/sh，如果运行失败，系统的启动也会失败。                                                    
　　二、运行级别                                                                                               
　　那么，到底什么是运行级呢？                                                                                 
　　简单的说，运行级就是操作系统当前正在运行的功能级别。这个级别从1到6 ，具有不同的功能。                      
　　不同的运行级定义如下                                                                                       
　　# 0 - 停机（千万不能把initdefault 设置为0 ）                                                               
　　# 1 - 单用户模式 # s init s = init 1                                                                       
　　# 2 - 多用户，没有 NFS                                                                                     
　　# 3 - 完全多用户模式(标准的运行级)                                                                         
　　# 4 - 没有用到                                                                                             
　　# 5 - X11 多用户图形模式（xwindow)                                                                         
　　# 6 - 重新启动（千万不要把initdefault 设置为6 ）                                                           
　　这些级别在/etc/inittab 文件里指定。这个文件是init 程序寻找的主要文件，最先运行的服务是放在/etc/rc.d 目录   
下的文件。在大多数的Linux 发行版本中，启动脚本都是位于 /etc/rc.d/init.d中的。这些脚本被用ln 命令连接到         
/etc/rc.d/rcn.d 目录。(这里的n 就是运行级0-6)                                                                  
3）：chkconfig 命令（redhat 操作系统下）                                                                       
不像DOS 或者 Windows，Linux 可以有多种运行级。常见的就是多用户的2,3,4,5 ，很多人知道 5 是运行 X-Windows 的级   
别，而 0 就是关机了。运行级的改变可以通过 init 命令来切换。例如，假设你要维护系统进入单用户状态，那么，可以使  
用 init 1 来切换。在 Linux 的运行级的切换过程中，系统会自动寻找对应运行级的目录/etc/rc[0-6].d下的K 和 S 开头   
的文件，按后面的数字顺序，执行这些脚本。对这些脚本的维护，是很繁琐的一件事情，Linux 提供了chkconfig 命令用来   
更新和查询不同运行级上的系统服务。                                                                             
语法为：                                                                                                       
                                                                                                               
chkconfig --list [name]                                                                                        
chkconfig --add name                                                                                           
chkconfig --del name                                                                                           
chkconfig [--level levels] name                                                                                
chkconfig [--level levels] name                                                                                
                                                                                                               
chkconfig 有五项功能：添加服务，删除服务，列表服务，改变启动信息以及检查特定服务的启动状态。                   
                                                                                                               
chkconfig 没有参数运行时，显示用法。如果加上服务名，那么就检查这个服务是否在当前运行级启动。如果是，返回 true  
，否则返回 false。--level 选项可以指定要查看的运行级而不一定是当前运行级。                                     
                                                                                                               
如果在服务名后面指定了on，off 或者 reset，那么 chkconfig 会改变指定服务的启动信息。on 和 off 分别指服务在改变  
运行级时的启动和停止。reset 指初始化服务信息，无论有问题的初始化脚本指定了什么。                               
                                                                                                               
对于 on 和 off 开关，系统默认只对运行级 3，4，5有效，但是 reset 可以对所有运行级有效。指定 --level 选项时，可  
以选择特定的运行级。                                                                                           
                                                                                                               
需要说明的是，对于每个运行级，只能有一个启动脚本或者停止脚本。当切换运行级时，init 不会重新启动已经启动的服务  
，也不会再次去停止已经停止的服务。                                                                             
                                                                                                               
选项介绍：                                                                                                     
                                                                                                               
--level levels                                                                                                 
指定运行级，由数字 0 到 7 构成的字符串，如：                                                                   
                                                                                                               
--level 35 表示指定运行级3 和5。                                                                               
要在运行级别3、4、5中停运 nfs 服务，使用下面的命令：chkconfig --level 345 nfs off                              
                                                                                                               
--add name                                                                                                     
这个选项增加一项新的服务，chkconfig 确保每个运行级有一项启动(S) 或者杀死(K) 入口。如有缺少，则会从缺省的init   
脚本自动建立。                                                                                                 
                                                                                                               
--del name                                                                                                     
用来删除服务，并把相关符号连接从 /etc/rc[0-6].d 删除。                                                         
                                                                                                               
--list name                                                                                                    
列表，如果指定了name 那么只是显示指定的服务名，否则，列出全部服务在不同运行级的状态。                          
                                                                                                               
运行级文件                                                                                                     
                                                                                                               
每个被chkconfig 管理的服务需要在对应的init.d 下的脚本加上两行或者更多行的注释。                                
第一行告诉 chkconfig 缺省启动的运行级以及启动和停止的优先级。如果某服务缺省不在任何运行级启动，那么使用 - 代   
替运行级。                                                                                                     
第二行对服务进行描述，可以用跨行注释。                                                                         
                                                                                                               
例如，random.init 包含三行：                                                                                   
# chkconfig: 2345 20 80                                                                                        
# description: Saves and restores system entropy pool for                                                      
# higher quality random number generation.                                                                     
表明 random 脚本应该在运行级 2, 3, 4, 5 启动，启动优先权为20，停止优先权为 80。                                
                                                                                                               
好了，介绍就到这里了，去看看自己目录下的/etc/rc.d/init.d 下的脚本吧。                                          
                                                                                                               
设置自启动服务:chkconfig --level 345 nfs on                                                                    
                                                                                                               
2. 实例介绍：                                                                                                  
1、在linux下安装了apache 服务（通过下载二进制文件经济编译安装、而非rpm包）、apache 服务启动命令：              
/server/apache/bin/apachectl start 。让apache服务运行在运行级别3下面。命令如下：                               
                                                                                                               
1）touch /etc/rc.d/init.d/apache                                                                               
vi /etc/rc.d/init.d/apache                                                                                     
chown -R root /etc/rc.d/init.d/apache                                                                          
chmod 700 /etc/rc.d/init.d/apache                                                                              
ln -s /etc/rc.d/init.d/apache /etc/rc.d/rc3.d/S60apache #S 是start的简写、代表启动、K是kill的简写、代表关闭。  
60数字代表启动的顺序。（对于iptv系统而言、许多服务都是建立在数据库启动的前提下才能够正常启动的、可以通过该数   
字就行调整脚本的启动顺序））                                                                                   
                                                                                                               
apache的内容：                                                                                                 
#!/bin/bash                                                                                                    
#Start httpd service                                                                                           
/server/apache/bin/apachectl start                                                                             
                                                                                                               
至此 apache服务就可以在运行级别3下随机自动启动了。（可以结合chkconfig 对启动服务进行相应的调整）。             
由于相关变量定义不同, 所以以下启动顺序仅供参考                                                                 
在Redhat Redflag centos fc linux系统里面脚本的启动                                                             
                                                                                                               
先后：                                                                                                         
第一步：通过/boot/vm进行启动 vmlinuz                                                                           
第二步：init /etc/inittab                                                                                      
第三步：启动相应的脚本，并且打开终端                                                                           
rc.sysinit                                                                                                     
rc.d(里面的脚本）                                                                                              
rc.local                                                                                                       
第四步：启动login登录界面 login                                                                                
第五步:在用户登录的时候执行sh脚本的顺序：每次登录的时候都会完全执行的                                          
/etc/profile.d/file                                                                                            
/etc/profile                                                                                                   
/etc/bashrc                                                                                                    
/root/.bashrc                                                                                                  
/root/.bash_profile                                                                                            


[end]
